---
jobs:
- name: unit-testing
  plan:
  - get: concourse-resources
  - get: source-code
    trigger: true
  - task: unit test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          aws_access_key_id: ((aws-access-key-id))
          aws_secret_access_key: ((aws-secret-access-key))
          repository: ((docker-registry))/ci-open-jdk8-maven-build
          tag: latest
      inputs:
        - name: source-code
      run:
        path: /bin/bash
        args: 
        - -c
        - |
          make -C source-code build test-unit

- name: integration-testing
  plan:
  - get: concourse-resources
  - get: source-code
    trigger: true

  - task: drop database and insert dummy values
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: mongo
          tag: 4.1.10-bionic
      inputs:
      - name: source-code
      run:
        path: /bin/bash
        args:
          - -c
          - |
            cd source-code
            mongoimport --jsonArray --host mongo-db1-waldorf.dev.aws.internal:27017 --db extension_requests --collection extension_requests --file src/test/resources/mongoTestData.json --drop

  - task: integration test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          aws_access_key_id: ((aws-access-key-id))
          aws_secret_access_key: ((aws-secret-access-key))
          repository: ((docker-registry))/ci-open-jdk8-maven-build
          tag: latest
      inputs:
      - name: source-code
      run:
        path: /bin/bash
        args:
          - -c
          - |
            make -C source-code build test-integration

- name: waldorf
  serial_groups: [waldorf-group]
  plan:
  - get: github-release
  - get: source-code
    trigger: true
    passed: [release]
  - task: deploy to waldorf
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          aws_access_key_id: ((aws-access-key-id))
          aws_secret_access_key: ((aws-secret-access-key))
          repository: ((docker-registry))/ci-version-calculator
          tag: latest
    
      inputs:
      - name: github-release
      - name: source-code
      run:
        path: /bin/bash
        args:
        - -c
        - |
          set -e
          echo "Sleeping for 60 seconds to give the release/config server time to catch up"
          sleep 60
          export VERSION=$(< github-release/version)
          export ENVIRONMENT=waldorf
          apk add --update make curl
          cd source-code
          make marathon
          cat marathon-deploy.json
          curl -X PUT -H 'Content-Type: application/json' -i http://mesos-master1-waldorf.dev.aws.internal:8080/v2/apps/extensions-api -d@marathon-deploy.json

- name: statler
  serial_groups: [statler-group]
  plan:
  - get: github-release
  - get: source-code
    trigger: true
    passed: [release]
  - task: deploy to statler
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          aws_access_key_id: ((aws-access-key-id))
          aws_secret_access_key: ((aws-secret-access-key))
          repository: ((docker-registry))/ci-version-calculator
          tag: latest
    
      inputs:
      - name: github-release
      - name: source-code
      run:
        path: /bin/bash
        args:
        - -c
        - |
          set -e
          echo "Sleeping for 60 seconds to give the release/config server time to catch up"
          sleep 60
          export VERSION=$(< github-release/version)
          export ENVIRONMENT=statler
          apk add --update make curl
          cd source-code
          make marathon
          cat marathon-deploy.json
          curl -X PUT -H 'Content-Type: application/json' -i http://mesos-master1-statler.dev.aws.internal:8080/v2/apps/extensions-api -d@marathon-deploy.json


- name: release
  plan:
  - get: source-code
    trigger: true
    passed: [unit-testing, integration-testing]
  - get: release-tag
  - get: concourse-resources
  - task: verify-not-release
    file: concourse-resources/tasks/release/verify-not-release/task.yml
  - task: calculate-new-version
    file: concourse-resources/tasks/release/calculate-new-version/task.yml
  - task: package-zip
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          aws_access_key_id: ((aws-access-key-id))
          aws_secret_access_key: ((aws-secret-access-key))
          repository: ((docker-registry))/ci-open-jdk8-maven-build
          tag: latest
      inputs:
        - name: source-code
        - name: version
      outputs:
        - name: artifacts
      run:
        path: /bin/bash
        args:
          - -c
          - |
            make -C source-code package version="$(< version/version)"
            cp source-code/extensions-api-*.zip artifacts

  - put: s3-release-bucket
    params:
      file: artifacts/extensions-api-*.zip
  - put: github-release
    params:
      commitish: source-code/.git/ref
      name: version/version
      tag: version/version
      include_source_zip: true
      globs: 
        - artifacts/extensions-api-*.zip

resources:
- name: source-code
  type: git
  source:
    uri: git@github.com:companieshouse/extensions-api.git
    branch: master
    version: latest
    private_key: ((github-ssh-key))

- name: concourse-resources
  type: git
  source:
    uri: git@github.com:companieshouse/ci-concourse-resources.git
    branch: master
    version: latest
    private_key: ((github-ssh-key))

- name: github-release
  type: github-release
  source:
    owner: companieshouse
    repository: extensions-api
    access_token: ((github-release-token))
    release: true

- name: release-tag
  type: ci-resource-type-release-tag
  source:
    uri: git@github.com:companieshouse/extensions-api.git
    branch: master
    private_key: ((github-ssh-key))
    tag_filter: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'

- name: s3-release-bucket
  type: s3
  source:
      bucket: release.ch.gov.uk
      region_name: ((aws-region))
      private: true
      regexp: extensions-api-(.*).zip
      access_key_id: ((aws-access-key-id))
      secret_access_key: ((aws-secret-access-key))

resource_types:
- name: ci-resource-type-release-tag
  type: docker-image
  source:
    aws_access_key_id: ((aws-access-key-id))
    aws_secret_access_key: ((aws-secret-access-key))
    repository: ((docker-registry))/ci-resource-type-release-tag
    tag: latest
